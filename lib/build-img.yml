---
- hosts: localhost
  vars_files:
    - ../vars/main.yml
  vars:
    - build_img_prefix: "hello-world"
    - tmp_dir: "../tmp"
    - log_dir: "../log"
    - base_img_file: "{{ base_img_url | basename }}"
    - base_img_name: "{{ base_img_file.split('.') | first }}"
    - packer_file: "{{ packer_url | basename }}"
  tasks:
    - name: create tmp directory
      file:
        path: "{{ tmp_dir }}"
        state: directory

    - name: create log directory
      file:
        path: "{{ log_dir }}"
        state: directory

    - name: enable openstack yum repo
      sudo: yes
      yum:
        name: https://repos.fedorapeople.org/repos/openstack/openstack-icehouse/rdo-release-icehouse-4.noarch.rpm
        state: present

    - name: install playbook dependencies via yum
      sudo: yes
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - unzip
        - qemu-img
        - python-novaclient
        - python-glanceclient

    # as of ansible v1.8.1 the unarchive module is not idempotent for zip archives
    - name: check if packer installed
      command: which packer
      register: packer
      changed_when: packer.stdout != "/usr/local/bin/packer"

    - name: download packer binary archive
      get_url:
        url: "{{ packer_url }}"
        dest: "{{ tmp_dir }}/{{ packer_file }}"
      when: packer.changed

    - name: install packer from archive
      sudo: yes
      unarchive:
        src: "{{ tmp_dir }}/{{ packer_file }}"
        dest: /usr/local/bin
      when: packer.changed

    - name: generate ssh key for current user
      user:
        name: "{{ ansible_user_id }}"
        generate_ssh_key: yes
        ssh_key_bits: 2048 
      register: gen_ssh_key

    - name: delete previous ssh key for openstack tenant
      nova_keypair:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: test-instance
        state: absent

    - name: add ssh key to openstack tenant
      nova_keypair:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name}}"
        name: test-instance
        public_key: "{{ lookup('file','~/.ssh/id_rsa.pub') }}"
        state: present

    - name: download source image
      get_url:
        url: "{{ base_img_url }}"
        dest: "{{ tmp_dir }}/{{ base_img_file }}"

    - name: convert source image to raw format
      command: qemu-img convert {{ base_img_file }} {{ base_img_name }}.raw
      args:
        chdir: "{{ tmp_dir }}"
        creates: "{{ base_img_name }}.raw"

    - name: upload converted source image to cloud project
      glance_image:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: "{{ base_img_name }}"
        file: "{{ tmp_dir }}/{{ base_img_name }}.raw"
        disk_format: raw
        is_public: false
        timeout: 1800
        state: present

    - name: get cloud instance flavor uuid for image build
      shell: nova flavor-list | awk '$6 >= 2048 && $6 <= 16192 && $8 >= 10 { print $2; exit }'
      environment:
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_TENANT_NAME: "{{ os_tenant_name }}"
      register: flavor
      changed_when: no
      failed_when: flavor.stdout == ""

    - name: get source image uuid for image build
      shell: nova image-list | awk '$4 == "'"{{ base_img_name }}"'" { print $2 }'
      environment:
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_TENANT_NAME: "{{ os_tenant_name }}"
      register: base_img_uuid
      changed_when: no
      failed_when: base_img_uuid.stdout == ""

    - name: generate version number for image build
      shell: date "+%Y%m%d"
      register: version
      changed_when: no

    - name: set_fact build_img
      set_fact:
        build_img: "{{ build_img_prefix }}-v{{ version.stdout }}"

    - name: print image name for build
      debug:
        msg: "{{ build_img }}"

    - name: check if image with same name registered in openstack
      shell: nova image-list | grep -q {{ build_img }}
      environment:
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_TENANT_NAME: "{{ os_tenant_name }}"
      register: build_exists
      changed_when: no
      failed_when: build_exists.rc > 1

    - name: build image and register with openstack
      shell:
        packer build
        -var 'flavor={{ flavor.stdout }}'
        -var 'source_image={{ base_img_uuid.stdout }}'
        -var 'image_name={{ build_img }}'
        -var 'networks={{ os_net_id }}'
        ../src/img.json
      environment:
        PACKER_LOG: 1
        PACKER_LOG_PATH: "{{ log_dir }}/{{ build_img }}.log"
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_TENANT_ID: "{{ os_tenant_id }}"
      when: build_exists.rc == 1

    # test the build
    - name: launch test instance of built image
      nova_compute:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: "{{ build_img }}"
        image_name: "{{ build_img }}"
        flavor_id: "{{ flavor.stdout }}"
        key_name: test-instance
        nics:
          - net-id: "{{ os_net_id }}"
        state: present
      register: test_instance

    - name: wait for test instance to boot
      local_action:
        module: wait_for
        host: "{{ test_instance.private_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: "{{ boot_wait | default(60) }}"
        timeout: 120
        state: started
      when: test_instance.changed

    - name: generate manifest of installed packages
      shell: rpm -qa | sort -V
      register: packages
      changed_when: no
      delegate_to: "{{ test_instance.private_ip }}"

    - name: generate manifest of installed containers
      sudo: yes
      shell: docker images | tail -n +2 | awk '{ print "repo:" $1 " tag:" $2 " image:" $3 }'
      register: containers
      changed_when: no
      delegate_to: "{{ test_instance.private_ip }}"

    - name: log manifest of installed packages to log directory
      local_action: "shell echo package: {{ item }} >> {{ log_dir }}/{{ build_img }}.manifest"
      with_items:
        - "{{ packages.stdout_lines }}"

    - name: log manifest of installed containers to log directory
      local_action: "shell echo container: {{ item }} >> {{ log_dir }}/{{ build_img }}.manifest"
      with_items:
        - "{{ containers.stdout_lines }}"

    - name: destroy test instance
      nova_compute:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: "{{ build_img }}"
        state: absent

---
- hosts: localhost
  connection: local
  vars:
    - base_img_url: http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2c
    - packer_url: https://dl.bintray.com/mitchellh/packer/packer_0.7.5_linux_amd64.zip
    # static
    - tmp_dir: "{{ ansible_env.HOME }}/tmp"
    - log_dir: "{{ ansible_env.HOME }}/logs"
    - git_repo: "{{ git_url | basename }}"
    - git_dir: "{{ git_repo.split('.') | first }}"
    - base_img_file: "{{ base_img_url | basename }}"
    - base_img_name: "{{ base_img_file.split('.') | first }}"
    - packer_file: "{{ packer_url | basename }}"

  vars_files:
    - "{{ ansible_env.HOME }}/vars.yml"

  tasks:
    - name: base directory
      command: git rev-parse --show-toplevel
      register: top_dir
      always_run: yes
      changed_when: no 

    - name: create ~/tmp directory
      file:
        path: "{{ tmp_dir }}"
        state: directory
      tags: setup
 
    - name: create ~/logs directory
      file:
        path: "{{ log_dir }}"
        state: directory
      tags: build
 
    - name: enable openstack yum repo
      sudo: yes
      yum:
        name: https://repos.fedorapeople.org/repos/openstack/openstack-icehouse/rdo-release-icehouse-4.noarch.rpm
        state: present
      tags: setup
 
    - name: install playbook dependencies via yum
      sudo: yes
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - unzip
        - qemu-img
        - python-novaclient
        - python-glanceclient
      tags: setup
 
    # as of ansible v1.8.1 the unarchive module is not idempotent for zip archives
    - name: check if packer installed
      command: which packer
      register: packer
      changed_when: packer.stdout != "/usr/local/bin/packer"
      always_run: yes
      tags: setup
 
    - name: download packer binary archive
      get_url:
        url: "{{ packer_url }}"
        dest: "{{ tmp_dir }}/{{ packer_file }}"
      when: packer.changed
      tags: setup
 
    - name: install packer from archive
      sudo: yes
      unarchive:
        src: "{{ tmp_dir }}/{{ packer_file }}"
        dest: /usr/local/bin
      when: packer.changed
      tags: setup

    - name: generate ssh key for current user
      user:
        name: "{{ ansible_user_id }}"
        generate_ssh_key: yes
        ssh_key_bits: 2048 
      tags: setup

    - name: add ssh key to openstack tenant
      nova_keypair:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: build-img
        public_key: "{{ lookup('file','~/.ssh/id_rsa.pub') }}"
        state: present
      tags: setup

    - name: download source image
      get_url:
        url: "{{ base_img_url }}"
        dest: "{{ tmp_dir }}/{{ base_img_file }}"
      tags: setup
 
    - name: convert source image to raw format
      command: qemu-img convert {{ base_img_file }} {{ base_img_name }}.raw
      args:
        chdir: "{{ tmp_dir }}"
        creates: "{{ base_img_name }}.raw"
      tags: setup
 
    - name: upload converted source image to cloud project
      glance_image:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: "{{ base_img_name }}"
        file: "{{ tmp_dir }}/{{ base_img_name }}.raw"
        disk_format: raw
        is_public: false
        timeout: 1800
        state: present
      tags: setup
 
    - name: get cloud instance flavor uuid for image build
      shell: nova flavor-list | awk '$6 >= 2048 && $6 <= 16192 && $8 >= 10 {print $2; exit }'
      environment:
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_TENANT_NAME: "{{ os_tenant_name }}"
      register: flavor
      changed_when: no
      failed_when: flavor.stdout == ""
      always_run: yes
      tags:
        - build
        - test
 
    - name: get source image uuid for image build
      shell: nova image-list | awk '$4 == "'"{{ base_img_name }}"'" { print $2 }'
      environment:
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_TENANT_NAME: "{{ os_tenant_name }}"
      register: base_img_uuid
      changed_when: no
      failed_when: base_img_uuid.stdout == ""
      tags: build
 
    - name: generate version number for image build
      shell: date "+%Y%m%d%H%M"
      register: version
      changed_when: no
      always_run: yes
      tags:
        - build
        - test
 
    - name: set_fact build_img
      set_fact: build_img=hello-world-v{{ version.stdout }}
      always_run: yes
      tags:
        - build
        - test
 
    - name: check if build already exists
      shell: nova image-list | grep -q {{ build_img }}
      register: build_exists
      changed_when: build_exists.rc == 1
      failed_when: no
      always_run: yes
      tags: build
 
    - name: build image
      shell:
        packer build
        -var 'flavor={{ flavor.stdout }}'
        -var 'source_image={{ base_img_uuid.stdout }}'
        -var 'image_name={{ build_img }}'
        {{ top_dir.stdout }}/src/hello-world-img.json
      environment:
        PACKER_LOG: 1
        PACKER_LOG_PATH: "{{ log_dir }}/{{ build_img }}.log"
        OS_AUTH_URL: "{{ os_auth_url }}"
        OS_USERNAME: "{{ os_username }}"
        OS_PASSWORD: "{{ os_password }}"
        OS_TENANT_ID: "{{ os_tenant_id }}"
      when: build_exists.changed
      tags: build
        
    # test to confirm the built image boots properly 
    - name: launch instance of built image
      nova_compute:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: "{{ build_img }}"
        image_name: "{{ build_img }}"
        flavor_id: "{{ flavor.stdout }}"
        key_name: "build-img"
        state: present
      register: instance
      tags: test
      
    - name: set_fact ansible_ssh_host
      set_fact: ansible_ssh_host={{ instance.private_ip }}
      when: instance.changed
      tags: test
      
    - name: wait for instance to boot
      local_action:
        module: wait_for
        host: "{{ ansible_ssh_host }}"
        port: 22
        delay: "{{ boot_wait | default(60) }}"
        timeout: 120
        state: started
      when: instance.changed
      tags: test
      
    - name: destroy instance
      nova_compute:
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ os_username }}"
        login_password: "{{ os_password }}"
        login_tenant_name: "{{ os_tenant_name }}"
        name: "{{ build_img }}"
        state: absent
      when: instance.changed
      tags: test
